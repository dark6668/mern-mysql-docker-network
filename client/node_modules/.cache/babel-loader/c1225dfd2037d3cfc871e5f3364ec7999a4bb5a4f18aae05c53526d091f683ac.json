{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nexport default class Utility {\n  static async FetchRequest(request) {\n    console.log(request.Authorization);\n    try {\n      return new Promise((resolve, reject) => {\n        fetch(`${process.env.REACT_APP_API_URL}/${request.url}`, {\n          method: request.method,\n          body: request.method === \"GET\" ? null : request.body,\n          headers: {\n            \"Content-Type\": request.ContentType\n            // ...(someCondition && { \"Authorization\": `Bearer ${accessToken}` }),\n          }\n        }).then(response => {\n          if (response.status !== 200) {\n            response.json().then(errorData => {\n              reject(errorData);\n            });\n          } else {\n            response.json().then(responseData => {\n              resolve(responseData);\n            }).catch(err => {\n              console.log(err);\n            });\n          }\n        });\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  static checkAccessTokenExpiresIn() {\n    return new Promise((resolve, reject) => {\n      try {\n        const decodedToken = jwtDecode(sessionStorage.getItem(\"accessToken\"));\n        const expirationTime = decodedToken.exp * 1000;\n        if (expirationTime < Date.now()) return reject(\"Access token has expired\");\n        resolve(decodedToken);\n      } catch (error) {\n        reject(new Error(\"Failed to decode access token\"));\n      }\n    });\n  }\n  static makeNewAccessToken(newAccessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        sessionStorage.removeItem(\"accessToken\");\n        sessionStorage.setItem(\"accessToken\", newAccessToken);\n        resolve(true);\n      } catch (error) {\n        console.error(error);\n        reject(false);\n      }\n    });\n  }\n}","map":{"version":3,"names":["jwtDecode","Utility","FetchRequest","request","console","log","Authorization","Promise","resolve","reject","fetch","process","env","REACT_APP_API_URL","url","method","body","headers","ContentType","then","response","status","json","errorData","responseData","catch","err","checkAccessTokenExpiresIn","decodedToken","sessionStorage","getItem","expirationTime","exp","Date","now","error","Error","makeNewAccessToken","newAccessToken","removeItem","setItem"],"sources":["/react/src/function/utility.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\n\nexport  default class Utility{\n\n\n  static async  FetchRequest(request){\n    console.log(request.Authorization);\n    try {\n\n      return new Promise((resolve, reject) => {\n        fetch(`${process.env.REACT_APP_API_URL}/${request.url}`, {\n          method: request.method,\n          body: request.method === \"GET\" ? null : request.body,\n          headers: {\n            \"Content-Type\": request.ContentType,\n            // ...(someCondition && { \"Authorization\": `Bearer ${accessToken}` }),\n          },\n        }).then((response) => {\n          if (response.status !== 200) {\n            response.json().then((errorData) => {\n              reject(errorData);\n            });\n          } else {\n            response\n              .json()\n              .then((responseData) => {\n                resolve(responseData);\n              })\n              .catch((err) => {\n                console.log(err);\n              });\n          }\n        });\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  static checkAccessTokenExpiresIn(){\n    return new Promise((resolve, reject) => {\n      try {\n        const decodedToken = jwtDecode(sessionStorage.getItem(\"accessToken\"));\n  \n        const expirationTime = decodedToken.exp * 1000;\n  \n        if (expirationTime < Date.now())\n          return reject(\"Access token has expired\");\n        resolve(decodedToken);\n      } catch (error) {\n        reject(new Error(\"Failed to decode access token\"));\n      }\n    });\n  }\n  static makeNewAccessToken(newAccessToken){\n    return new Promise((resolve, reject) => {\n      try {\n        sessionStorage.removeItem(\"accessToken\");\n        sessionStorage.setItem(\"accessToken\", newAccessToken);\n        resolve(true);\n      } catch (error) {\n        console.error(error);\n        reject(false);\n      }\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAEtC,eAAgB,MAAMC,OAAO;EAG3B,aAAcC,YAAYA,CAACC,OAAO,EAAC;IACjCC,OAAO,CAACC,GAAG,CAACF,OAAO,CAACG,aAAa,CAAC;IAClC,IAAI;MAEF,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,IAAGV,OAAO,CAACW,GAAI,EAAC,EAAE;UACvDC,MAAM,EAAEZ,OAAO,CAACY,MAAM;UACtBC,IAAI,EAAEb,OAAO,CAACY,MAAM,KAAK,KAAK,GAAG,IAAI,GAAGZ,OAAO,CAACa,IAAI;UACpDC,OAAO,EAAE;YACP,cAAc,EAAEd,OAAO,CAACe;YACxB;UACF;QACF,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;UACpB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;YAC3BD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,SAAS,IAAK;cAClCd,MAAM,CAACc,SAAS,CAAC;YACnB,CAAC,CAAC;UACJ,CAAC,MAAM;YACLH,QAAQ,CACLE,IAAI,CAAC,CAAC,CACNH,IAAI,CAAEK,YAAY,IAAK;cACtBhB,OAAO,CAACgB,YAAY,CAAC;YACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;cACdtB,OAAO,CAACC,GAAG,CAACqB,GAAG,CAAC;YAClB,CAAC,CAAC;UACN;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOA,GAAG,EAAE;MACZtB,OAAO,CAACC,GAAG,CAACqB,GAAG,CAAC;IAClB;EACF;EACA,OAAOC,yBAAyBA,CAAA,EAAE;IAChC,OAAO,IAAIpB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACF,MAAMmB,YAAY,GAAG5B,SAAS,CAAC6B,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;QAErE,MAAMC,cAAc,GAAGH,YAAY,CAACI,GAAG,GAAG,IAAI;QAE9C,IAAID,cAAc,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAC7B,OAAOzB,MAAM,CAAC,0BAA0B,CAAC;QAC3CD,OAAO,CAACoB,YAAY,CAAC;MACvB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACd1B,MAAM,CAAC,IAAI2B,KAAK,CAAC,+BAA+B,CAAC,CAAC;MACpD;IACF,CAAC,CAAC;EACJ;EACA,OAAOC,kBAAkBA,CAACC,cAAc,EAAC;IACvC,OAAO,IAAI/B,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACFoB,cAAc,CAACU,UAAU,CAAC,aAAa,CAAC;QACxCV,cAAc,CAACW,OAAO,CAAC,aAAa,EAAEF,cAAc,CAAC;QACrD9B,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC,OAAO2B,KAAK,EAAE;QACd/B,OAAO,CAAC+B,KAAK,CAACA,KAAK,CAAC;QACpB1B,MAAM,CAAC,KAAK,CAAC;MACf;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}