{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nexport default class Utility {\n  static async FetchRequest(request) {\n    return new Promise((resolve, reject) => {\n      fetch(`${process.env.REACT_APP_API_URL}/${request.url}`, {\n        method: request.method,\n        body: request.method === \"GET\" ? null : request.body,\n        headers: {\n          \"Content-Type\": request.ContentType,\n          ...(request.Authorization != undefined && {\n            \"Authorization\": `Bearer ${sessionStorage.getItem(\"accessToken\")}`\n          })\n        }\n      }).then(response => {\n        if (response.status !== 200) {\n          response.json().then(errorData => {\n            reject(errorData);\n          });\n          return;\n        }\n        response.json().then(responseData => {\n          resolve(responseData);\n        }).catch(err => {\n          reject(err);\n        });\n      }).catch(err => {\n        reject({\n          error: err\n        });\n      });\n    });\n  }\n  static checkAccessTokenExpiresIn() {\n    return new Promise((resolve, reject) => {\n      try {\n        const decodedToken = jwtDecode(sessionStorage.getItem(\"accessToken\"));\n        const expirationTime = decodedToken.exp * 1000;\n        if (expirationTime < Date.now()) return reject(\"Access token has expired\");\n        resolve(decodedToken);\n      } catch (error) {\n        reject(new Error(\"Failed to decode access token\"));\n      }\n    });\n  }\n  static makeNewAccessToken(newAccessToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        sessionStorage.removeItem(\"accessToken\");\n        sessionStorage.setItem(\"accessToken\", newAccessToken);\n        resolve(true);\n      } catch (error) {\n        console.error(error);\n        reject(false);\n      }\n    });\n  }\n}","map":{"version":3,"names":["jwtDecode","Utility","FetchRequest","request","Promise","resolve","reject","fetch","process","env","REACT_APP_API_URL","url","method","body","headers","ContentType","Authorization","undefined","sessionStorage","getItem","then","response","status","json","errorData","responseData","catch","err","error","checkAccessTokenExpiresIn","decodedToken","expirationTime","exp","Date","now","Error","makeNewAccessToken","newAccessToken","removeItem","setItem","console"],"sources":["/react/src/function/utility.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\n\nexport  default class Utility{\n\n\n  static async  FetchRequest(request){\n      return new Promise((resolve, reject) => {\n        fetch(`${process.env.REACT_APP_API_URL}/${request.url}`, {\n          method: request.method,\n          body: request.method === \"GET\" ? null : request.body,\n          headers: {\n            \"Content-Type\": request.ContentType,\n            ...(request.Authorization != undefined && { \"Authorization\": `Bearer ${sessionStorage.getItem(\"accessToken\")}` }),\n          },\n        }).then((response) => {\n          if (response.status !== 200) {\n            response.json().then((errorData) => {\n              reject(errorData);\n            });\n            return\n          }\n            response\n              .json()\n              .then((responseData) => {\n                resolve(responseData);\n              })\n              .catch((err) => {\n                reject(err);\n              });\n        \n        }) .catch((err) => {\n          reject({error: err });\n        });\n      });\n  }\n  static checkAccessTokenExpiresIn(){\n    return new Promise((resolve, reject) => {\n      try {\n        const decodedToken = jwtDecode(sessionStorage.getItem(\"accessToken\"));\n  \n        const expirationTime = decodedToken.exp * 1000;\n  \n        if (expirationTime < Date.now())\n          return reject(\"Access token has expired\");\n        resolve(decodedToken);\n      } catch (error) {\n        reject(new Error(\"Failed to decode access token\"));\n      }\n    });\n  }\n  static makeNewAccessToken(newAccessToken){\n    return new Promise((resolve, reject) => {\n      try {\n        sessionStorage.removeItem(\"accessToken\");\n        sessionStorage.setItem(\"accessToken\", newAccessToken);\n        resolve(true);\n      } catch (error) {\n        console.error(error);\n        reject(false);\n      }\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAEtC,eAAgB,MAAMC,OAAO;EAG3B,aAAcC,YAAYA,CAACC,OAAO,EAAC;IAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,IAAGP,OAAO,CAACQ,GAAI,EAAC,EAAE;QACvDC,MAAM,EAAET,OAAO,CAACS,MAAM;QACtBC,IAAI,EAAEV,OAAO,CAACS,MAAM,KAAK,KAAK,GAAG,IAAI,GAAGT,OAAO,CAACU,IAAI;QACpDC,OAAO,EAAE;UACP,cAAc,EAAEX,OAAO,CAACY,WAAW;UACnC,IAAIZ,OAAO,CAACa,aAAa,IAAIC,SAAS,IAAI;YAAE,eAAe,EAAG,UAASC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAE;UAAE,CAAC;QAClH;MACF,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QACpB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;UAC3BD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,SAAS,IAAK;YAClClB,MAAM,CAACkB,SAAS,CAAC;UACnB,CAAC,CAAC;UACF;QACF;QACEH,QAAQ,CACLE,IAAI,CAAC,CAAC,CACNH,IAAI,CAAEK,YAAY,IAAK;UACtBpB,OAAO,CAACoB,YAAY,CAAC;QACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;UACdrB,MAAM,CAACqB,GAAG,CAAC;QACb,CAAC,CAAC;MAER,CAAC,CAAC,CAAED,KAAK,CAAEC,GAAG,IAAK;QACjBrB,MAAM,CAAC;UAACsB,KAAK,EAAED;QAAI,CAAC,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;EACA,OAAOE,yBAAyBA,CAAA,EAAE;IAChC,OAAO,IAAIzB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACF,MAAMwB,YAAY,GAAG9B,SAAS,CAACkB,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;QAErE,MAAMY,cAAc,GAAGD,YAAY,CAACE,GAAG,GAAG,IAAI;QAE9C,IAAID,cAAc,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAC7B,OAAO5B,MAAM,CAAC,0BAA0B,CAAC;QAC3CD,OAAO,CAACyB,YAAY,CAAC;MACvB,CAAC,CAAC,OAAOF,KAAK,EAAE;QACdtB,MAAM,CAAC,IAAI6B,KAAK,CAAC,+BAA+B,CAAC,CAAC;MACpD;IACF,CAAC,CAAC;EACJ;EACA,OAAOC,kBAAkBA,CAACC,cAAc,EAAC;IACvC,OAAO,IAAIjC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACFY,cAAc,CAACoB,UAAU,CAAC,aAAa,CAAC;QACxCpB,cAAc,CAACqB,OAAO,CAAC,aAAa,EAAEF,cAAc,CAAC;QACrDhC,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC,OAAOuB,KAAK,EAAE;QACdY,OAAO,CAACZ,KAAK,CAACA,KAAK,CAAC;QACpBtB,MAAM,CAAC,KAAK,CAAC;MACf;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}