{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nexport default function FetchRequest(request) {\n  try {\n    return new Promise((resolve, reject) => {\n      fetch(`${process.env.REACT_APP_API_URL}/${request.url}`, {\n        method: request.method,\n        body: request.method === \"GET\" ? null : request.body,\n        headers: {\n          \"Content-Type\": request.ContentType\n        }\n      }).then(response => {\n        if (response.status !== 200) {\n          response.json().then(errorData => {\n            reject(errorData);\n          });\n        } else {\n          response.json().then(responseData => {\n            resolve(responseData);\n          }).catch(err => {\n            console.log(err);\n          });\n        }\n      });\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n_c = FetchRequest;\nexport function authorizeAccessToken(accessToken) {\n  return new Promise((resolve, reject) => {\n    try {\n      const decodedToken = jwtDecode(accessToken);\n      const expirationTime = decodedToken.exp * 1000;\n      if (expirationTime < Date.now()) return reject(\"Access token has expired\");\n      resolve(decodedToken);\n    } catch (error) {\n      reject(new Error(\"Failed to decode access token\"));\n    }\n  });\n}\nexport function makeNewAccessToken(newAccessToken) {\n  return new Promise((resolve, reject) => {\n    try {\n      sessionStorage.removeItem(\"accessToken\");\n      sessionStorage.setItem(\"accessToken\", newAccessToken);\n      resolve(true);\n    } catch (error) {\n      console.error(error);\n      reject(false);\n    }\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"FetchRequest\");","map":{"version":3,"names":["jwtDecode","FetchRequest","request","Promise","resolve","reject","fetch","process","env","REACT_APP_API_URL","url","method","body","headers","ContentType","then","response","status","json","errorData","responseData","catch","err","console","log","_c","authorizeAccessToken","accessToken","decodedToken","expirationTime","exp","Date","now","error","Error","makeNewAccessToken","newAccessToken","sessionStorage","removeItem","setItem","$RefreshReg$"],"sources":["/react/src/function/utility.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\nexport default function FetchRequest(request) {\n  try {\n    return new Promise((resolve, reject) => {\n      fetch(`${process.env.REACT_APP_API_URL}/${request.url}`, {\n        method: request.method,\n        body: request.method === \"GET\" ? null : request.body,\n        headers: {\n          \"Content-Type\": request.ContentType,\n        },\n      }).then((response) => {\n        if (response.status !== 200) {\n          response.json().then((errorData) => {\n            reject(errorData);\n          });\n        } else {\n          response\n            .json()\n            .then((responseData) => {\n              resolve(responseData);\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      });\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\n\nexport function authorizeAccessToken(accessToken) {\n  return new Promise((resolve, reject) => {\n    try {\n      const decodedToken = jwtDecode(accessToken);\n\n      const expirationTime = decodedToken.exp * 1000;\n\n      if (expirationTime < Date.now())\n        return reject(\"Access token has expired\");\n      resolve(decodedToken);\n    } catch (error) {\n      reject(new Error(\"Failed to decode access token\"));\n    }\n  });\n}\nexport function makeNewAccessToken(newAccessToken) {\n  return new Promise((resolve, reject) => {\n    try {\n      sessionStorage.removeItem(\"accessToken\");\n      sessionStorage.setItem(\"accessToken\", newAccessToken);\n      resolve(true);\n    } catch (error) {\n      console.error(error);\n      reject(false);\n    }\n  });\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,eAAe,SAASC,YAAYA,CAACC,OAAO,EAAE;EAC5C,IAAI;IACF,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,IAAGP,OAAO,CAACQ,GAAI,EAAC,EAAE;QACvDC,MAAM,EAAET,OAAO,CAACS,MAAM;QACtBC,IAAI,EAAEV,OAAO,CAACS,MAAM,KAAK,KAAK,GAAG,IAAI,GAAGT,OAAO,CAACU,IAAI;QACpDC,OAAO,EAAE;UACP,cAAc,EAAEX,OAAO,CAACY;QAC1B;MACF,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QACpB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;UAC3BD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEI,SAAS,IAAK;YAClCd,MAAM,CAACc,SAAS,CAAC;UACnB,CAAC,CAAC;QACJ,CAAC,MAAM;UACLH,QAAQ,CACLE,IAAI,CAAC,CAAC,CACNH,IAAI,CAAEK,YAAY,IAAK;YACtBhB,OAAO,CAACgB,YAAY,CAAC;UACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;YACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;UAClB,CAAC,CAAC;QACN;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOA,GAAG,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAClB;AACF;AAACG,EAAA,GA7BuBxB,YAAY;AAgCpC,OAAO,SAASyB,oBAAoBA,CAACC,WAAW,EAAE;EAChD,OAAO,IAAIxB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMuB,YAAY,GAAG5B,SAAS,CAAC2B,WAAW,CAAC;MAE3C,MAAME,cAAc,GAAGD,YAAY,CAACE,GAAG,GAAG,IAAI;MAE9C,IAAID,cAAc,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAC7B,OAAO3B,MAAM,CAAC,0BAA0B,CAAC;MAC3CD,OAAO,CAACwB,YAAY,CAAC;IACvB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd5B,MAAM,CAAC,IAAI6B,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACpD;EACF,CAAC,CAAC;AACJ;AACA,OAAO,SAASC,kBAAkBA,CAACC,cAAc,EAAE;EACjD,OAAO,IAAIjC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACFgC,cAAc,CAACC,UAAU,CAAC,aAAa,CAAC;MACxCD,cAAc,CAACE,OAAO,CAAC,aAAa,EAAEH,cAAc,CAAC;MACrDhC,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAACA,KAAK,CAAC;MACpB5B,MAAM,CAAC,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ;AAAC,IAAAoB,EAAA;AAAAe,YAAA,CAAAf,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}